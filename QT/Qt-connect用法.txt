## 信号和槽

信号和槽是qt用于对象之间通信的核心机制。其目的类似于当一个动作发生的时候，需要对这个动作做出相应的处理，类似的还有借助于函数指针的回调机制，通过回调函数完成对此动作的操作。但是如果对一个庞杂的系统，这种回调函数的维护是相当的麻烦和危险的，使用太多的回调会导致高耦合的情况，这在实际开发过程中是尽量避免的。QT的信号和槽机制避免了该问题，使用起来非常灵活。connect用于连接qt的信号和槽，在qt编程过程中不可或缺。它其实有第五个参数，只是一般使用默认值，在满足某些特殊需求的时候可能需要手动设置。

1. **Qt::AutoConnection：**默认值，使用这个值则连接类型会在信号发送时决定。如果接收者和发送者在同一个线程，则自动使用Qt::DirectConnection类型。如果接收者和发送者不在一个线程，则自动使用Qt::QueuedConnection类型。
2. **Qt::DirectConnection：**槽函数会在信号发送的时候直接被调用，**槽函数运行于信号发送者所在线程**。效果看上去就像是直接在信号发送位置调用了槽函数。这个在多线程环境下比较危险，可能会造成奔溃。
3. **Qt::QueuedConnection：**槽函数在控制回到接收者所在线程的事件循环时被调用，**槽函数运行于信号接收者所在线程**。发送信号之后，槽函数不会立刻被调用，等到接收者的当前函数执行完，进入事件循环之后，槽函数才会被调用。多线程环境下一般用这个。
4. **Qt::BlockingQueuedConnection：槽函数的调用时机与Qt::QueuedConnection一致，不过发送完信号后发送者所在线程会阻塞**，直到槽函数运行完。接收者和发送者绝对不能在一个线程，否则程序会死锁。在多线程间需要同步的场合可能需要这个。
5. **Qt::UniqueConnection：**这个flag可以通过按位或（|）与以上四个结合在一起使用。当这个flag设置时，当某个信号和槽已经连接时，再进行重复的连接就会失败。也就是避免了重复连接。

